{<img src="https://secure.travis-ci.org/rubiety/message_block.png?branch=master" alt="Build Status" />}[http://travis-ci.org/rubiety/message_block]
{<img src="https://gemnasium.com/rubiety/message_block.png" alt="Dependency Status" />}[https://gemnasium.com/rubiety/message_block]
{<img src="https://codeclimate.com/github/rubiety/message_block.png" />}[https://codeclimate.com/github/rubiety/message_block]

= Message Block

Implements the common view pattern by which a list of messages are shown at the top, 
often a combination of flash messages and ActiveRecord validation issues on one or more models.  
This allows for a nice, stylized block of messages at the top of the page with icons 
indicating what type of message it is (error, confirmation, warning, etc.)

This view helper acts as a replacement for error_messages_for by taking error messages 
from your models and combing them with flash messages (multiple types such as error, confirm, etc.) 
and outputting them to your view.  This gem comes with an example stylesheet and images.


== Installation: Rails 3.1+ Asset Pipeline (message_block 2.0)

Include the gem using bundler in your Gemfile:

  gem "message_block", "~> 2.0"

Include the stylesheet in your application.css:

  /*
   *= require message_block
  */


== Installation: Rails 3.0 Without Asset Pipeline (message_block 1.1)

Include the gem using bundler in your Gemfile:

  gem "message_block", "~> 1.1"

Then run the rake task to install the static files:

  rake message_block:install

Then be sure to include the CSS definitions:

  <%= stylesheet_include_tag "message_block" %>


== Usage

Once you install this, you should now have a set of images at public/images/message_block and 
a basic stylesheet installed at public/stylesheets/message_block.css.  Then you can use 
the helper <tt><%= message_block %></tt>:

The first argument specifies a hash options:

* <tt>:on</tt> - specifies one or many model names for which to check error messages. You can specify the special value of :all which will grab all view assignments that contain an ActiveModel "errors" method.
* <tt>:model_error_type</tt> - specifies the message type to use for validation errors; defaults to 'error'
* <tt>:flash_types</tt> - specifies the keys to check in the flash hash.  Messages will be grouped in ul 
  lists according to this type.  Defaults to: [:notice, :back, :confirm, :error, :alert, :info, :warn]
* <tt>:html</tt> - Specifies HTML options for the containing div
* <tt>:id</tt> - Specifies ID of the containing div; defaults to 'message_block'
* <tt>:class</tt> - Specifies class name of the containing div; defaults to nothing.
* <tt>:container</tt> - specifies which block-level element to contain the errors (defaults to :div).

=== Example

Imagine you have a form for entering a user and a comment:

  <%= message_block :on => [:user, :comment] %>

Imagine also you set these flash variables in the controller:
  class CommentsController
    def create
      flash.now[:error] = "Error A"
      flash.now[:confirm] = "Confirmation A"  # Note you can use different types
      flash.now[:warn] = ["Warn A", "Warn B"]  # Can set to an array for multiple messages
    end
  end

And let's say that you want to show these messages but also show the validation issues 
given that both user and comment fail ActiveRecord validation:

  <div id="message_block" class="message_block">
    <ul class="error">
      <li>Error A</li>
      <li>User first name is required.</li>
      <li>Comment contents is required.</li>
    </ul>
    <ul class="confirm">
      <li>Confirmation A</li>
    </ul>
    <ul class="warn">
      <li>Warn A</li>
      <li>Warn B</li>
    </ul>
  </div>

Note that instead of manually specifying models you wish to report errors on, you can instead use the special <tt>:all</tt> value which will automatically use all view assign values that contain an ActiveModel::Errors "errors" method.


== Running Tests

This gem uses appraisal to test with different versions of the dependencies. See Appraisal first for which versions are tested, then run to test all appraisals:

  $ rake appraisal test

